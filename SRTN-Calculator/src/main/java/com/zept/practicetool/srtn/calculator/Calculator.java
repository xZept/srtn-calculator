package com.zept.practicetool.srtn.calculator;

import java.util.List;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Allen James Laxamana
 */
public class Calculator extends javax.swing.JFrame {

    public Calculator() {
        initComponents();
    }

    // Global variable to keep track of the number of completed processes and the time spent
    static int completedProcess = 0;
    static int timeSpent = 0;

    // Global variable for AWT and ATaT
    static int awt = 0;
    static int atat = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUserInput = new javax.swing.JTable();
        lblUserInput = new javax.swing.JLabel();
        lblGantt = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblChart = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        slderNoOfProcess = new javax.swing.JSlider();
        lblMin = new javax.swing.JLabel();
        lblMax = new javax.swing.JLabel();
        btnCalculate = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblWaiting = new javax.swing.JLabel();
        lblAverageTurn = new javax.swing.JLabel();
        lblAverageWaiting = new javax.swing.JLabel();
        lblTurn = new javax.swing.JLabel();
        lblAveWT = new javax.swing.JLabel();
        lblAveTaT = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaTaT = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaWT = new javax.swing.JTextArea();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shortest Remaining Time Next (STRN) Calculator");

        tblUserInput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process", "Arrival Time", "Burst Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUserInput.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(tblUserInput);

        lblUserInput.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUserInput.setText("USER INPUT");

        lblGantt.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblGantt.setText("GANTT CHART");

        tblChart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(tblChart);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        slderNoOfProcess.setMaximum(6);
        slderNoOfProcess.setMinimum(2);
        slderNoOfProcess.setMinorTickSpacing(1);
        slderNoOfProcess.setPaintLabels(true);
        slderNoOfProcess.setPaintTicks(true);
        slderNoOfProcess.setSnapToTicks(true);
        slderNoOfProcess.setValue(2);
        slderNoOfProcess.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slderNoOfProcessStateChanged(evt);
            }
        });

        lblMin.setText("MIN");

        lblMax.setText("MAX");

        btnCalculate.setText("CALCULATE");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(lblMin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnCalculate))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(slderNoOfProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMax, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slderNoOfProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMin)
                    .addComponent(lblMax, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(btnCalculate)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblWaiting.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblWaiting.setText("WAITING TIME (WT)");

        lblAverageTurn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAverageTurn.setText("Average TurnAround Time (ATaT)");

        lblAverageWaiting.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAverageWaiting.setText("Average Waiting Time (AWT)");

        lblTurn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTurn.setText("TURNAROUND TIME (TaT)");

        lblAveWT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAveWT.setText("-");

        lblAveTaT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAveTaT.setText("-");
        lblAveTaT.setToolTipText("");

        txtAreaTaT.setEditable(false);
        txtAreaTaT.setColumns(20);
        txtAreaTaT.setRows(5);
        jScrollPane2.setViewportView(txtAreaTaT);

        txtAreaWT.setEditable(false);
        txtAreaWT.setColumns(20);
        txtAreaWT.setRows(5);
        jScrollPane3.setViewportView(txtAreaWT);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(lblAverageTurn))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(lblTurn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(lblAverageWaiting)
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(lblWaiting)
                        .addGap(62, 62, 62))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(lblAveTaT, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblAveWT, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTurn)
                    .addComponent(lblWaiting))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAverageWaiting)
                    .addComponent(lblAverageTurn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAveWT)
                    .addComponent(lblAveTaT))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(127, 127, 127)
                                .addComponent(lblUserInput))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(214, 214, 214)
                                .addComponent(lblGantt))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUserInput)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblGantt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void slderNoOfProcessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slderNoOfProcessStateChanged
        int value = slderNoOfProcess.getValue();
        DefaultTableModel userInputModel = (DefaultTableModel) tblUserInput.getModel();
        userInputModel.setRowCount(value);
        for (int i = 0; i < slderNoOfProcess.getValue(); i++) {
            userInputModel.setValueAt("P" + (i + 1), i, 0);
        }
    }//GEN-LAST:event_slderNoOfProcessStateChanged

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        // Create table models
        DefaultTableModel userInputModel = (DefaultTableModel) tblUserInput.getModel();
        DefaultTableModel chartModel = (DefaultTableModel) tblChart.getModel();

        // Create arrays with sizes equivalent to the number of processes
        String processName[] = new String[userInputModel.getRowCount()];
        int arrivalTime[] = new int[userInputModel.getRowCount()];
        int burstTime[] = new int[userInputModel.getRowCount()];
        int burstTimeCopy[] = new int[userInputModel.getRowCount()];

        try {
            // Save the user input values to your arrays or process them as needed
            for (int i = 0; i < userInputModel.getRowCount(); i++) {
                processName[i] = (String) userInputModel.getValueAt(i, 0);
                arrivalTime[i] = (int) userInputModel.getValueAt(i, 1);
                burstTime[i] = (int) userInputModel.getValueAt(i, 2);
                burstTimeCopy[i] = burstTime[i];
            }

            // Sort the table based on their arrival
            sortTable(userInputModel);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Please confirm the values by pressing ENTER.");
        }

        // Save the user input values to an array
        for (int i = 0; i < userInputModel.getRowCount(); i++) {
            processName[i] = (String) userInputModel.getValueAt(i, 0);
            arrivalTime[i] = (int) userInputModel.getValueAt(i, 1);
            burstTime[i] = (int) userInputModel.getValueAt(i, 2);
            burstTimeCopy[i] = burstTime[i];
        }

        // Create a new row for the Gantt Chart
        chartModel.addRow(new Object[userInputModel.getRowCount()]);
        int rowIndex = chartModel.getRowCount() - 1;

        // Save the arrival times to a stack
        Stack<Integer> stk = new Stack<>();
        for (int i = userInputModel.getRowCount() - 1; i >= 0; i--) {
            stk.push(arrivalTime[i]);
        }
        stk.pop();

        // Add a 0 at the start of the chart
        chartModel.addColumn("");
        chartModel.setValueAt(timeSpent, rowIndex, 0);
        
        int rowCount = userInputModel.getRowCount();
        
        while (completedProcess != userInputModel.getRowCount()) {
            int nextArrivalTime = 0;
            if (!stk.isEmpty()) {
                nextArrivalTime = stk.peek();
            }

            int tempTaT = 0;

            burstTime[0] = runProcess(processName[0], arrivalTime[0], burstTime[0], nextArrivalTime);

            if (burstTime[0] == 0) {
                completedProcess++;

                // Add the new column to the Gantt Chart
                chartModel.addColumn(processName[0]);

                // Set the value in the same row for the corresponding column
                int columnIndex = chartModel.getColumnCount() - 1;
                chartModel.setValueAt(timeSpent, rowIndex, columnIndex);

                // Compute Waiting Time and TurnAround Time
                tempTaT = computeTaT(processName[0], timeSpent, arrivalTime[0]);
                atat += tempTaT;
                awt += computeWT(processName[0], tempTaT, burstTimeCopy[0]);

                sortArray(processName, arrivalTime, burstTime, burstTimeCopy);

            } else {
                // Add the new column to the Gantt Chart
                chartModel.addColumn(processName[0]);

                // Set the value in the same row for the corresponding column
                int columnIndex = chartModel.getColumnCount() - 1;
                chartModel.setValueAt(timeSpent, rowIndex, columnIndex);
                sortArray(processName, arrivalTime, burstTime, burstTimeCopy);
            }

            // Move to the next arrival time if the current one is reached
            if ((!stk.isEmpty()) && (stk.peek() <= timeSpent)) {
                stk.pop();
            }
        }
        
        lblAveWT.setText(Integer.toString(awt / rowCount));
        lblAveTaT.setText(Integer.toString(atat / rowCount));
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void sortArray(String[] processName, int[] arrivalTime, int[] burstTime, int[] burstTimeCopy) {
        Integer[] indexes = new Integer[burstTime.length];

        for (int i = 0; i < burstTime.length; i++) {
            indexes[i] = i;
        }

        // Sorting based on burst time and then arrival time
        Arrays.sort(indexes, Comparator.comparingInt(i -> {
            if ((arrivalTime[i] <= timeSpent) && (burstTime[i] > 0)) {
                return burstTime[i];
            } else {
                // Set a high value for processes that haven't arrived yet or have burst time 0
                return Integer.MAX_VALUE;
            }
        }));

        // Create a temporary array to store the sorted values
        String[] tempProcessName = Arrays.copyOf(processName, processName.length);
        int[] tempArrivalTime = Arrays.copyOf(arrivalTime, arrivalTime.length);
        int[] tempBurstTime = Arrays.copyOf(burstTime, burstTime.length);
        int[] tempBurstTimeCopy = Arrays.copyOf(burstTimeCopy, burstTimeCopy.length);

        // Copy back the values to the original arrays based on the sorted indexes
        for (int i = 0; i < burstTime.length; i++) {
            processName[i] = tempProcessName[indexes[i]];
            arrivalTime[i] = tempArrivalTime[indexes[i]];
            burstTime[i] = tempBurstTime[indexes[i]];
            burstTimeCopy[i] = tempBurstTimeCopy[indexes[i]];
        }
    }

    private int computeTaT(String processName, int fTeT, int arrivalTime) {
        txtAreaTaT.append(processName + ": " + fTeT + " - " + arrivalTime + " = " + (fTeT - arrivalTime));
        txtAreaTaT.append("\n");
        return fTeT - arrivalTime;
    }

    private int computeWT(String processName, int turnAroundTime, int burstTime) {
        txtAreaWT.append(processName + ": " + turnAroundTime + " - " + burstTime + " = " + (turnAroundTime - burstTime));
        txtAreaWT.append("\n");
        return turnAroundTime - burstTime;
    }

    private void sortTable(DefaultTableModel model) {
        // Get the number of rows in the model
        int rowCount = model.getRowCount();

        // Create a 2D array to hold the data
        Object[][] data = new Object[rowCount][model.getColumnCount()];

        // Populate the 2D array with data from the model
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < model.getColumnCount(); j++) {
                data[i][j] = model.getValueAt(i, j);
            }
        }

        // Sort the 2D array based on the "Arrival Time" column
        Arrays.sort(data, new Comparator<Object[]>() {
            @Override
            public int compare(Object[] row1, Object[] row2) {
                Comparable<Object> val1 = (Comparable<Object>) row1[1];
                Comparable<Object> val2 = (Comparable<Object>) row2[1];
                return val1.compareTo(val2);
            }
        });

        // Clear the model
        model.setRowCount(0);

        // Populate the model with the sorted data
        for (Object[] row : data) {
            model.addRow(row);
        }

        // Reflect the changes 
        tblUserInput.revalidate();
        tblUserInput.repaint();
    }

    // Run each process using recursion
    private int runProcess(String name, int arrival, int burst, int nextProcessArrival) {
        // Burst time has reached 0
        if (burst == 0) {
            return burst;
        } // If another process arrives at this time, check burst times and prioritize the lower burst time
        if (timeSpent == nextProcessArrival) {
            return burst;
        }
        timeSpent++;
        // Recursive call
        return runProcess(name, arrival, burst - 1, nextProcessArrival);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblAveTaT;
    private javax.swing.JLabel lblAveWT;
    private javax.swing.JLabel lblAverageTurn;
    private javax.swing.JLabel lblAverageWaiting;
    private javax.swing.JLabel lblGantt;
    private javax.swing.JLabel lblMax;
    private javax.swing.JLabel lblMin;
    private javax.swing.JLabel lblTurn;
    private javax.swing.JLabel lblUserInput;
    private javax.swing.JLabel lblWaiting;
    private javax.swing.JSlider slderNoOfProcess;
    private javax.swing.JTable tblChart;
    private javax.swing.JTable tblUserInput;
    private javax.swing.JTextArea txtAreaTaT;
    private javax.swing.JTextArea txtAreaWT;
    // End of variables declaration//GEN-END:variables
}
